@model DSUGrupp1.Models.ViewModels.HomeViewModel

@{
    ViewData["Title"] = "Home Page";
}

@section LeftContent {
    <div class="municipality-text">
        <h1>Vaccinationsgrad i Östersunds kommun</h1>
    </div>
    @await Component.InvokeAsync("Chart", new { Id = "1", ChartModel = Model.Charts[0] })

}

@section RightContent {

<h2 class="container-headline">Statistik från DeSo områden i kommunen år 2022</h2>
@Html.DropDownListFor(d => d.DeSoDropDown.SelectedDeso, Model.DeSoDropDown.DeSos, "Välj ett område", new { @id = "deSo-dropdown" })

<div id="deSo-statistics">
    
</div>

    <canvas id="deSo-chart"></canvas>
    <script>
        let myChart;

        document.addEventListener('DOMContentLoaded', function () {
            const deSoDropdown = document.getElementById('deSo-dropdown');

            deSoDropdown.addEventListener('change', function () {
                let selectedDeSo = this.value;

                fetch('/Home/GetChartFromDeSoCode', {
                    method: 'POST',
                    headers: {
                        'Content-type': 'application/json',

                    },
                    body: JSON.stringify({ selectedDeSo }),
                })

                    .then(response => {
                        if (!response.ok) {
                            throw new Error('Inte bra');
                        }
                        return response.json();
                    })
                    .then(data => {


                        clearDeSoInformation();
                        const deSoStatisticContainer = document.getElementById('deSo-statistics');

                        const population = document.createElement('p');
                        population.innerText = 'Invånare i området: ' + data.population;
                        deSoStatisticContainer.appendChild(population);
                        
                        const doseOne = document.createElement('p');
                        doseOne.innerText = 'Antal dos 1 injektioner: ' + data.doseOne;
                        deSoStatisticContainer.appendChild(doseOne)

                        const doseTwo = document.createElement('p');
                        doseTwo.innerText = 'Antal dos 2 injektioner: ' + data.doseTwo;
                        deSoStatisticContainer.appendChild(doseTwo)

                        const doseThree = document.createElement('p');
                        doseThree.innerText = 'Antal dos 3 injektioner: ' + data.doseThree;
                        deSoStatisticContainer.appendChild(doseThree)

                        const totalInjections = document.createElement('p');
                        totalInjections.innerText = 'Totala antalet injektioner i området: ' + data.totalInjections;
                        deSoStatisticContainer.appendChild(totalInjections)



                        console.log('Success:', data);

                        const ctx = document.getElementById('deSo-chart').getContext('2d');
                        const chart = JSON.parse(data.jsonChart);

                        if (myChart) {
                            myChart.destroy();
                        }

                        myChart = new Chart(ctx, chart); 
                        
                    })
                    .catch((error) => {
                        console.error('Error:', error);
                    });
            });
        });


        function clearDeSoInformation() {
            const deSoStatisticContainer = document.getElementById('deSo-statistics');

            while (deSoStatisticContainer.firstChild) {
                deSoStatisticContainer.removeChild(deSoStatisticContainer.firstChild);
            }
        }
    </script>

    
    
}



@section CenterContentOne {
    <div class="age-chart-text">
        <h1>Vaccinationsstatistik utifrån åldersgrupper</h1>
    </div>
    @await Component.InvokeAsync("Chart", new { Id = "canvas2", ChartModel = Model.Charts[1]})
}
@section CenterContentTwo {
    <h1 id="title-gender">Statistik fördelat efter kön i hela Östersunds kommun</h1>
    <div class="center-two">
        <div class="chart-females">
            @await Component.InvokeAsync("Chart", new { Id = "4", ChartModel = Model.Charts[2] })
            <p class="gender-paragraf">Cirkeldiagram som presenterar vaccinationsgraden i procent hos alla kvinnor.</p>
        </div>
        <div class="chart-males">
            @await Component.InvokeAsync("Chart", new { Id = "5", ChartModel = Model.Charts[3] })
            <p class="gender-paragraf">Cirkeldiagram som presenterar vaccinationsgraden i procent hos alla män.</p>

        </div>
        <div class="chart-both-genders">
            @await Component.InvokeAsync("Chart", new { Id = "6", ChartModel = Model.Charts[4] })
            <p class="gender-paragraf">Cirkeldiagram som presenterar vaccinationsgraden i procent mellan kvinnor och män.</p>

        </div>
    </div>
}




